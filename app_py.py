# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fiycIrZOSa-981ZZG-5931XC1tzKYScY
"""

!pip install streamlit

# ✅ STEP 1: Install required libraries
!pip install pandas

# ✅ STEP 2: Upload multiple JSON files
from google.colab import files
uploaded = files.upload()  # upload multiple JSON files here

# ✅ STEP 3: Load and merge all JSON files
import pandas as pd
import json

dataframes = []

for filename in uploaded.keys():
    with open(filename, 'r') as file:
        json_data = json.load(file)
        df = pd.json_normalize(json_data)  # flatten nested JSON if needed
        dataframes.append(df)

# ✅ STEP 4: Concatenate into a single DataFrame
merged_df = pd.concat(dataframes, ignore_index=True)

# ✅ STEP 5: Preview the combined data
merged_df.head()

# ✅ STEP 6: Save as CSV (optional)
merged_df.to_csv("merged_data.csv", index=False)

# ✅ STEP 7: Or save as cleaned JSON
merged_df.to_json("merged_data.json", orient="records", indent=4)

# ✅ STEP 8: Download result
files.download("merged_data.csv")
files.download("merged_data.json")

import pandas as pd
import json

with open("merged_data.json") as f:
    data = json.load(f)

df = pd.json_normalize(data)

import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="📱 Mobile Promoter Dashboard", layout="wide")

# ✅ Load data
@st.cache_data
def load_data():
    return pd.read_json("merged_data.json")

df = load_data()

# ✅ Identify brand columns dynamically (assumes numeric types except Branch & Manager)
non_brand_cols = ["Branch", "Manager"]
brand_columns = [col for col in df.columns if col not in non_brand_cols and pd.api.types.is_numeric_dtype(df[col])]

# ✅ Sidebar filters
st.sidebar.header("🔍 Filters")
managers = st.sidebar.multiselect("Select Manager(s)", options=df["Manager"].unique(), default=df["Manager"].unique())

if not brand_columns:
    st.sidebar.warning("⚠️ No brand data found in file.")
brands = st.sidebar.multiselect("Select Brand(s)", options=brand_columns, default=brand_columns)

# ✅ Filter by manager
filtered_df = df[df["Manager"].isin(managers)]

# ✅ Safe KPI calculations
total_branches = filtered_df.shape[0]

if brands:
    total_promoters = filtered_df[brands].sum().sum()
    avg_per_branch = round(total_promoters / total_branches, 1) if total_branches > 0 else 0
else:
    total_promoters = 0
    avg_per_branch = 0

# ✅ KPI section
col1, col2, col3, col4 = st.columns(4)
col1.metric("🏢 Total Branches", total_branches)
col2.metric("👥 Total Promoters", total_promoters)
col3.metric("📈 Avg Promoters/Branch", avg_per_branch)
col4.metric("✅ Active Managers", len(filtered_df['Manager'].unique()))

st.markdown("---")

# ✅ Charts — guarded by brand selection
if brands:
    st.subheader("📊 Promoters by Brand")
    brand_totals = filtered_df[brands].sum().reset_index()
    brand_totals.columns = ["Brand", "Total"]
    st.plotly_chart(px.bar(brand_totals, x="Brand", y="Total", color="Brand"), use_container_width=True)

    st.subheader("📊 Promoters by Manager")
    manager_totals = filtered_df.groupby("Manager")[brands].sum().sum(axis=1).reset_index(name="Total")
    st.plotly_chart(px.pie(manager_totals, names="Manager", values="Total"), use_container_width=True)

    # Top 10 branches
    top_df = filtered_df.copy()
    top_df["Total"] = top_df[brands].sum(axis=1)
    top_10 = top_df.sort_values("Total", ascending=False).head(10)
    st.subheader("🏆 Top 10 Branches by Total Promoters")
    st.plotly_chart(px.bar(top_10, x="Total", y="Branch", color="Manager", orientation="h"), use_container_width=True)

    # Heatmap
    st.subheader("📊 Brand vs Manager Heatmap")
    heatmap_data = filtered_df.groupby("Manager")[brands].sum()
    st.plotly_chart(px.imshow(heatmap_data, text_auto=True, title="Brand Distribution"), use_container_width=True)

# ✅ Data Table
st.subheader("📋 Branch-Level Data")

if brands:
    filtered_df["Total"] = filtered_df[brands].sum(axis=1)

display_cols = [col for col in non_brand_cols + brands + (["Total"] if "Total" in filtered_df.columns else []) if col in filtered_df.columns]
st.dataframe(filtered_df[display_cols], use_container_width=True)

# ✅ Download Options
st.markdown("### 📥 Download Filtered Data")
st.download_button("Download CSV", filtered_df.to_csv(index=False), file_name="filtered_data.csv")
st.download_button("Download JSON", filtered_df.to_json(orient="records", indent=4), file_name="filtered_data.json")

